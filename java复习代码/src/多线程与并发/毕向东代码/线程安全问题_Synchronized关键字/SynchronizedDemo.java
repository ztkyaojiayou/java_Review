package 多线程与并发.毕向东代码.线程安全问题_Synchronized关键字;

/*
线程安全问题产生的原因：

1，操作共享数据的线程代码有多条。
2，多个线程在操作共享的数据。

当一个线程在执行操作共享数据的多条代码过程中，其他线程参与了运算。
就会导致线程安全问题的产生。


解决思路；
就是将多条操作共享数据的线程代码封装起来，当有线程在执行这些代码的时候，
其他线程则不能让其参与执行。
必须要当前线程把这些代码都执行完毕后，其他线程才可以参与执行。

在java中，用synchronized关键字就可以解决这个问题
它有三种用法：
1、同步代码块
2、同步方法
3、静态同步方法


如何找问题：
1、明确哪些代码是多线程运行代码
2、明确共享数据
3、明确多线程运行代码中哪些语句是操作共享数据的。

同步代码块的格式：
synchronized(对象)//这个对象可以随意指定，可以是obj对象（此时一般选“共享资源”对象，选obj纯粹只是为了实现一下线程安全），
                   也可以是this对象，也可以是类名.class对象。
{
	需要被同步的代码 ；
}
同步的好处：解决了线程的安全问题。


同步的弊端：相对降低了效率，因为同步外的线程的都会判断同步锁。

（重点）同步的前提：同步中必须有多个线程，并使用同一个锁，
这很容易理解，即某一个线程先获取到锁（此时其他线程就只能在外面等着该线程执行完后释放锁才有可能进入同步代码块），
然后安全执行，完毕之后就释放锁，接着其他线程才有机会去争抢这把锁，获取该锁后再安全执行，再释放该锁，
其他线程又开始抢占该锁，依次类推。这样就可以保证线程安全了。
易知，这里的前提就是各个线程都只能使用同一把锁，否则它们是毫不相干的，则会存在安全性问题。
分两种情况：
（1）若所有线程都是使用的同步代码块，则肯定是共用同一把锁，这毫无疑问，则不会存在安全性问题。
（2）关键是，若多个线程并不都是使用同一个同步代码块或者其中一个线程使用的是同步方法或者静态同步方法（但只能二选一，因为二者的锁就已经不一样了），
由于后者使用的锁都是固定的（后面的demo会讲到），
则若想这些线程使用的是同一把锁，则只能修改同步代码块中的锁了，
因为只有同步代码块中的锁是可以人为指定的，它可以是任意对象，既可以是obj对象（此时一般选“共享资源”对象，选obj纯粹只是为了实现一下线程安全），
也可以是this对象，也可以是类名.class对象。
也因此，就可以使用“同步代码块+卖票”场景来验证同步方法和静态同步方法的锁是什么了，且后面的demo就是这样使用的。
*/


/*
案例需求：卖票。
*/
class Ticket01 implements Runnable//extends Thread
{
    private  int num = 100;

    Object obj = new Object();
    public void run()
    {
        while(true)
        {
            synchronized(obj)//使用的是同步代码块，锁均为obj，则不会出现安全性问题，四个线程一起刚好卖出100张票
            {
                if(num>0)
                {
                    try{Thread.sleep(10);}catch (InterruptedException e){}//睡眠一会是为了给别的线程机会

                    System.out.println(Thread.currentThread().getName()+".....sale...."+num--);
                }
            }
            /**
             * 若不加同步代码块，则有可能出现如下情况，即卖出副票，卖超了：
             * Thread-1.....sale....0
             * Thread-2.....sale....-1
             * Thread-3.....sale....-2
             */
        }
    }
}


 public class  SynchronizedDemo
{
    public static void main(String[] args)
    {

        Ticket01 t = new Ticket01();//创建一个线程任务对象。

        //创建四个线程
        Thread t1 = new Thread(t);
        Thread t2 = new Thread(t);
        Thread t3 = new Thread(t);
        Thread t4 = new Thread(t);

        //启动线程
        t1.start();
        t2.start();
        t3.start();
        t4.start();


		/*
		Ticket t1 = new Ticket();
//		Ticket t2 = new Ticket();
//		Ticket t3 = new Ticket();
//		Ticket t4 = new Ticket();

		t1.start();
		t1.start();//一个线程不能开启两次，否则会抛出“无效线程状态”异常
		t1.start();
		t1.start();
		*/


    }
}


