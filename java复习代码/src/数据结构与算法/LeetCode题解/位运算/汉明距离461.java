package 数据结构与算法.LeetCode题解.位运算;

/**
 * 461. 汉明距离
 * 两个整数之间的汉明距离指的是这两个数字对应二进制位不同的位置的数目。
 * 给出两个整数 x 和 y，计算它们之间的汉明距离。
 *
 * 注意：
 * 0 ≤ x, y < 231.
 *
 * 示例:
 * 输入: x = 1, y = 4
 * 输出: 2
 * 解释:
 * 1   (0 0 0 1)
 * 4   (0 1 0 0)
 *        ↑   ↑
 * 上面的箭头指出了对应二进制位不同的位置。
 */

/**
 * 思路解析1：位运算，但是是直接使用库函数（不推荐）
 * 这题很明显就是使用异或运算（相同的为0，不同的为1，符号为^）即可。
 * 将两个数做异或运算，然后计算1的个数即是答案。
 * 使用库函数的话，一行代码即可搞定。
 * 但这显然不是面试官需要的答案，因此还需谋求它法，详见思路2
 */
class 汉明距离461 {
        public int hammingDistance(int x, int y) {
            return Integer.bitCount(x ^ y);
        }
    }

/**
 * 解题思路2：也是位运算，但由自己制定规则（推荐）
 *     （1）将x，y按位异或得到i，将问题转化为求i的二进制位中1的个数count
 *     （2）当i不为0时，将i与1按位与，判断其结果是否为1，若是，则count++
 *        （因为1的二进制形式为00001，则易知，当其和任何数按位与（全1才1）时，前面都必然是0，
 *         则其结果是否为1就决定了i的该位是否为1，因此就可以用于判断i的该位是不是1啦）
 *     （3）再将i右位移（符号为>>)一位（即一位一位地看，即一位一位地判断其是否是1，若是，就统计一次，很简单），
 *         重复第二步，第三步，直到第二步条件不满足，即i==0时终止统计，
 *         即可得到i的二进制位中1的个数，问题得解
 */
class Solution461_1 {
    public int hammingDistance(int x, int y) {
        //1.先亦或,将问题转化为求i的二进制位中1的个数count
        int i = x ^ y;
        //2.开始通过对i和1按位与，对i一位一位地检查其是否为1，若是，则count+1
        int count = 0;//统计量
        while (i != 0) {
            //2.1按位与，若为1，则统计量加1
            if ((i & 1) == 1) {
                count++;
            }
            //2.2再使i右移一位，继续判断该位是否为1
            i = i >> 1;
        }
        //3.最后，返回结果即可
        return count;
    }
}
