package 数据结构与算法.LeetCode题解.二叉树;

import 数据结构与算法.LeetCode题解.TreeNode;

/**
 * 617. 合并二叉树
 *
 * 给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。
 * 你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，
 * 那么将他们的值相加作为节点合并后的新值，
 * 否则不为 NULL 的节点将直接作为新二叉树的节点。
 *
 * 示例 1:
 * 输入:
 * 	Tree 1                     Tree 2
 *           1                         2
 *          / \                       / \
 *         3   2                     1   3
 *        /                           \   \
 *       5                             4   7
 * 输出:
 * 合并后的树:
 * 	     3
 * 	    / \
 * 	   4   5
 * 	  / \   \
 * 	 5   4   7
 * 注意: 合并必须从两个树的根节点开始。
 */

/**
 * 思路解析：使用递归即可，简单题。
 * 我们可以对这两棵树同时进行前序遍历，并将对应的节点进行合并。
 * 在遍历时，如果两棵树的当前节点均不为空，我们就将它们的值进行相加，并对它们的左孩子和右孩子进行递归合并；
 * 如果其中有一棵树为空，那么我们返回另一颗树作为结果；如果两棵树均为空，此时返回任意一棵树均可（因为都是空）。
 */
public class 合并二叉树617 {
    //就在第一颗树上进行合并即可
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        //1.递归结束的条件
        //1.1如果其中有一棵树为空，那么我们返回另一颗树作为结果；
        //如果两棵树均为空，此时返回任意一棵树均可（因为都是空），因此该情况可以不用单独考虑。
        if (t1 == null)
            return t2;
        if (t2 == null)
            return t1;
        //1.2如果两棵树的当前节点均不为空，我们就将它们的值进行相加，完成合并
        t1.val += t2.val;
        //2.再对它们的左孩子和右孩子进行递归合并；
        t1.left = mergeTrees(t1.left, t2.left);
        t1.right = mergeTrees(t1.right, t2.right);
        //3.最后返回第一棵树的根节点即可
        return t1;
    }
}
