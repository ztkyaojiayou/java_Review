package 数据结构与算法.LeetCode题解.动态规划;

/**
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 * 注意：给定 n 是一个正整数。
 *
 * 示例 1：
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 *
 * 示例 2：
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 */

/**
 * 解法：典型的动态规划问题（简单）
 * 易知，爬第n阶楼梯的方法数量，等于 2 部分之和，即：（爬上 n−1 阶楼梯的方法总数） + （爬上 n−2 阶楼梯的方法总数）
 *
 * （1）爬上 n−1 阶楼梯的方法数量。因为此时再爬1阶就能到第n阶。
 * （2）爬上 n−2 阶楼梯的方法数量，因为此时再爬2阶就能到第n阶。
 * 于是我们就可以得到状态方程/递推公式： dp[n] = dp[n-1] + dp[n-2]
 * 同时需要初始化 dp[0]=1 和 dp[1]=1
 * 时间复杂度：O(n)
 */
//标准的写法
public class 爬楼梯70 {
        public int climbStairs(int n) {
            //1.先定义一个数组，该数组每个元素的下标对应的是台阶的个数,元素的值存放的则是台阶数对应的方法数
            int[] dp = new int[n + 2];

            //2.再确定初始状态
            //dp[0] = 0; //不管怎样,数组下标指针肯定是从0开始的,所以要考虑0.有0个台阶,不需要爬,所以没有方法数(但从斐波那契角度,dp[0]=1)（不用考虑）
            //2.1当只有1阶台阶时,只有一种方式(1)
            dp[1] = 1;
            //2.2当有2阶台阶时,易知有两种方式(1+1, 2), 因为题目设定n是正整数,所以n最小是1,此时如果定义dp的长度是int[n + 1],则length=2
            //而dp[2]实际对应的是第三个元素,超出length了,所以定义new int[n + 2]更合理。
            dp[2] = 2;

            //3.再考虑一般情况，使用状态方程转化到初始状态即可
            //从第三个台阶开始遍历,第三个台阶,是第二个台阶的方法和第一个台阶的方法之和
            //第四个台阶,是第三个台阶和第二个台阶方法之和,依此论推....
            for (int i = 3; i <= n; i++) { //要遍历到第n个台阶,所以指针其实是从0到n,所以dp数组数量比n多1
                dp[i] = dp[i - 1] + dp[i - 2]; //最后到第n个台阶,得到结果后正好遍历完
            }

            //4.返回第n个台阶的爬法总数即可
            return dp[n];
        }
   }

