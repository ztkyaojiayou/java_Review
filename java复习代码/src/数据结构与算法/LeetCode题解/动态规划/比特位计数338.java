package 数据结构与算法.LeetCode题解.动态规划;

/**
 * 338. 比特位计数
 * 给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，（易知，遍历即可）
 * 计算其二进制数中的 1 的数目并将它们作为数组返回。
 *
 * 示例 1:
 * 输入: 2
 * 输出: [0,1,1]
 *
 * 示例 2:
 * 输入: 5
 * 输出: [0,1,1,2,1,2]
 *
 * 进阶:
 * 给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
 * 要求算法的空间复杂度为O(n)。
 * 你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 builtin_popcount）来执行此操作。
 */

/**
 * 解法：使用动态规划，但要了解一些基本的二进制知识
 * 设dp[i]为i的二进制形式的1的个数，则易知有两种情况：
 * （1）i是奇数时，dp[i]=dp[i-1]+1，因为i就是在二进制形式的i-1上加了个1呀；
 * （2）i是偶数时，dp[i]=dp[i/2]，因为i就是把二进制形式的i/2往左移（末尾补0）得到的，所以1的个数没变。
 *
 */
public class 比特位计数338 {
        public int[] countBits(int num) {
            //0.特判
            if(num==0){
                return new int[]{0};
            }
            //1.创建一个数组，其中，dp[i] 表示i的二进制数中的 1 的数目
            int [] dp = new int[num+1];//因为0 ≤ i ≤ num，所以有num+1个数
            //2.再确定初始情况
            dp[0]=0;
            //3.考虑一般情况，使用状态方程，把数组填满
            for(int i=1;i<num + 1;i++){
                //3.1当i为偶数时
                if(i % 2 == 0) {
                    dp[i]=dp[i/2];
                }
                else {//3.2当i为奇数时
                    dp[i]=dp[i-1]+1;
                }
            }
            //4.再返回刚才填满的数组即为所求
            return dp;
        }
    }
