package 数据结构与算法.LeetCode题解.动态规划;

/**
 * 给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。
 * 你需要让组成和的完全平方数的个数最少。
 *
 * 示例 1:
 * 输入: n = 12
 * 输出: 3
 * 解释: 12 = 4 + 4 + 4.
 *
 * 示例 2:
 * 输入: n = 13
 * 输出: 2
 * 解释: 13 = 4 + 9.
 */

/**
 * 首先初始化长度为n+1的数组dp，每个位置都为0
 * 如果n为0，则结果为0
 * 对数组进行遍历，下标为i，每次都将当前数字先更新为最大的结果，即dp[i]=i，比如i=4，最坏结果为4=1+1+1+1即为4个数字
 * 动态转移方程为：dp[i] = MIN(dp[i], dp[i - j * j] + 1)，i表示当前数字，j*j表示平方数
 * 即每次都减去一个从1开始的平方数，再看构成剩下的那个数的和的完全平方数的个数的最小值
 * 时间复杂度：O(n*sqrt(n))，sqrt为平方根
 */
public class 完全平方数279 {
    public int numSquares(int n) {
        //1.先创建一个数组
        int[] dp = new int[n + 1]; // 默认初始化值都为0，其中，dp[i] 表示：组成i的完全平方数的个数的最小值，则所求结果即为dp[n]
        //2.开始遍历
        for (int i = 1; i <= n; i++) {
            //2.1确认初始情况：
            //dp[0] = 0;//可不写
            //dp[1] = 1;//也可不写，因为已经包含在此循环中了
            dp[i] = i; //最坏的情况就是每次+1，即平方数全由1构成
            for (int j = 1; j * j <= i; j++) {//2.2再看一般情况，即只需要每次都减去一个平方数（从1开始），
                // 再求出构成剩下的该值的和的完全平方数的个数的最小值即可，以此类推，最终就会把问题转化到初始情况。
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1); // 状态方程（后面的加1是加上“减去的那个平方数”）
            }
        }
        //3.最后，返回所求结果即可
        return dp[n];
    }
}
