package 数据结构与算法.LeetCode题解.动态规划;

/**
 * 给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
 *
 * 示例:
 * 输入: 3
 * 输出: 5
 * 解释:
 * 给定 n = 3, 一共有 5 种不同结构的二叉搜索树:
 *
 *    1         3     3      2      1
 *     \       /     /      / \      \
 *      3     2     1      1   3      2
 *     /     /       \                 \
 *    2     1         2                 3
 *
 */

/**
 * 解法：典型的动态规划题
 * 假设n个节点存在二叉排序树的个数是G(n)，令f(i)为以i为根的二叉搜索树的个数，则
 * G(n) = f(1) + f(2) + f(3) + f(4) + ... + f(n)
 *
 * 对于每一个节点i，当i为根节点时，其左子树节点个数为i-1个(因为是二叉搜索树，因为是左子树，因此左节点只能小于n），右子树节点为n-i，则
 * f(i) = G(i-1)*G(n-i)
 *
 * 综合两个公式可以得到如下递推公式/状态方程（这其实就是所谓的卡特兰数）
 * G(n) = G(0)*G(n-1)+G(1)*(n-2)+...+G(n-1)*G(0)
 * 即累加，即双重循环
 */
public class 不同的二叉搜索树的种数96 {
        public int numTrees(int n) {
            //dp[i]表示i个节点存在的二叉搜索树的个数，则易知dp[n]即为所求。
            int[] dp = new int[n+1];
            //初始化
            dp[0] = 1;
            dp[1] = 1;
            //讨论一般情况，使用状态方程即可
            //因为是累加，所以可以使用两层循环解决
            for(int i = 2; i < n + 1; i++){
                //i从2开始，到i结束，即还有i-1组（加上初始值1（初始值0不算）刚好也是i组），符合上述公式
                for(int j = 1; j < i + 1; j++){
                    //j从1开始，到i结束，即i组，符合上述公式
                    dp[i] += dp[j-1] * dp[i-j];//状态方程（关键）
                }
            }
            return dp[n];//即为所求
        }
    }

