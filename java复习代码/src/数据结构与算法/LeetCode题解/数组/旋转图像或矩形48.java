package 数据结构与算法.LeetCode题解.数组;

/**
 * 48. 旋转图像
 * 给定一个 n × n 的二维矩阵表示一个图像。
 * 将图像顺时针旋转 90 度。
 *
 * 说明：
 * 你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。
 * 请不要使用另一个矩阵来旋转图像。
 *
 * 示例 1:
 * 给定 matrix =
 * [
 *   [1,2,3],
 *   [4,5,6],
 *   [7,8,9]
 * ],
 * 原地旋转输入矩阵，使其变为:
 * [
 *   [7,4,1],
 *   [8,5,2],
 *   [9,6,3]
 * ]
 *
 * 示例 2:
 * 给定 matrix =
 * [
 *   [ 5, 1, 9,11],
 *   [ 2, 4, 8,10],
 *   [13, 3, 6, 7],
 *   [15,14,12,16]
 * ],
 * 原地旋转输入矩阵，使其变为:
 * [
 *   [15,13, 2, 5],
 *   [14, 3, 4, 1],
 *   [12, 6, 8, 9],
 *   [16, 7,10,11]
 * ]
 */

/**
 * 思路解析：转置加翻转
 * 最直接的想法是先转置矩阵，然后翻转每一行，非常简单。
 * 这个简单的方法已经能达到最优的时间复杂度O(N^2)。
 */
public class 旋转图像或矩形48 {
        public void rotate(int[][] matrix) {
            int n = matrix.length;//矩阵的行数（且等于列数，因为所给矩阵为n阶方阵）

            // 1.先转置，即（0,1）换成（1,0），一般地，即（i，j）换成（j，i）
            //一行一行地换，即先固定行，再改变列，两次for循环遍历即可。
            for (int i = 0; i < n; i++) {
                for (int j = i; j < n; j++) {
                    //使用一个临时值temp即可完成交换，老生常谈啦
                    int tmp = matrix[j][i];
                    matrix[j][i] = matrix[i][j];
                    matrix[i][j] = tmp;
                }
            }
            // 2.再在此基础上翻转每一行即可
            // 同样地，先固定行，改变列，但是这里的列只需要在后半部分遍历即可，即j<n/2即可
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n / 2; j++) {
                    int tmp = matrix[i][j];
                    matrix[i][j] = matrix[i][n - j - 1];//因为矩阵是方阵，所以后一个元素可以写成matrix[i][n - j - 1]
                    matrix[i][n - j - 1] = tmp;
                }
            }
        }
}

