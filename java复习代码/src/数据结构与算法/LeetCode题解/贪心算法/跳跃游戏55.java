package 数据结构与算法.LeetCode题解.贪心算法;

/**
 * 55. 跳跃游戏（入门版）
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * 判断你是否能够到达最后一个位置。
 *
 * 示例 1:
 * 输入: [2,3,1,1,4]
 * 输出: true
 * 解释: 我们可以先跳 1 步，从位置 0 到达 位置 1,
 * 然后再从位置 1 跳 3 步到达最后一个位置。
 *
 * 示例 2:
 * 输入: [3,2,1,0,4]
 * 输出: false
 * 解释: 无论怎样，你总会到达索引为 3 的位置。
 * 但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
 */

/**
 * 思路：使用贪心算法，简单
 *
 * 设想一下，对于数组中的任意一个位置 y，我们如何判断它是否可以到达？
 * 根据题目的描述，只要存在一个位置 xx，它本身可以到达，并且它跳跃的最大长度为 x +nums[x]，这个值大于等于 y，
 * 即 x + {nums}[x]≥y，那么位置 y 就可以到达。
 *
 * 换句话说，对于每一个可以到达的位置 x，它使得 x+1, x+2,⋯,x+nums[x] 这些连续的位置都可以到达。
 *
 * 这样以来，我们依次遍历数组中的每一个位置，并实时维护 最远可以到达的位置。
 * 对于当前遍历到的位置 x，如果它在 最远可以到达的位置 的范围内，那么我们就可以从起点通过若干次跳跃到达该位置，
 * 因此我们可以用 x+nums[x] 更新 最远可以到达的位置。
 *
 * 在遍历的过程中，如果 最远可以到达的位置 大于等于数组中的最后一个位置，
 * 那就说明最后一个位置可达，我们就可以直接返回 True 作为答案。
 * 反之，如果在遍历结束后，最后一个位置仍然不可达，我们就返回 False 作为答案。
 *
 * 以题目中的示例一
 * [2, 3, 1, 1, 4]
 * 为例：
 * 我们一开始在位置 0，可以跳跃的最大长度为 2，因此最远可以到达的位置被更新为 2；
 * 我们遍历到位置 1，由于 1≤2，因此位置 11 可达。
 * 我们用 1 加上它可以跳跃的最大长度 3，将最远可以到达的位置更新为 4。
 * 由于 4 大于等于最后一个位置 4，因此我们直接返回 True。
 *
 * 我们再来看看题目中的示例二
 * [3, 2, 1, 0, 4]
 * 我们一开始在位置 0，可以跳跃的最大长度为 3，因此最远可以到达的位置被更新为 3；
 * 我们遍历到位置 1，由于 1 \leq 31≤3，因此位置 1 可达，
 * 加上它可以跳跃的最大长度 2 得到 3，没有超过最远可以到达的位置；
 * 位置 2、位置 3 同理，最远可以到达的位置不会被更新；
 * 我们遍历到位置 4，由于4>3，因此位置 4 不可达，我们也就不考虑它可以跳跃的最大长度了。
 * 在遍历完成之后，位置 4 仍然不可达，因此我们返回 False。
 */
public class 跳跃游戏55 {
        public boolean canJump(int[] nums) {
            int n = nums.length;
            int maxPosition = 0;//表示最远能到达的地方/索引
            for (int i = 0; i < n; i++) {//遍历整个数组
                if (i <= maxPosition) {//更新最远能到达的地方/索引
                    maxPosition = Math.max(maxPosition, i + nums[i]);
                    if (maxPosition >= n - 1) {//如果最远能到达的地方超过了最后一个位置，
                        // 则说明可以跳跃到最后一个位置，返回true即可
                        return true;
                    }
                }
            }
            //若遍历完之后都达不到，则返回false
            return false;
        }
    }

/**
 * 45. 跳跃游戏 II（进阶版）
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * （区别）你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 *
 * 示例:
 * 输入: [2,3,1,1,4]
 * 输出: 2
 * 解释: 跳到最后一个位置的最小跳跃数是 2。
 *      从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
 *
 * 说明:
 * 假设你总是可以到达数组的最后一个位置。
 */

/**
 * 思路：也是使用贪心算法，不难
 * 只是这一次是要求使用最少的跳跃次数来到达数组的最后一个位置。
 *
 * 我们同样正向遍历数组，以查找可到达的所有位置，
 * 再使用贪心的思想，在这个可达的位置中再挑选出能跳的最远的位置，
 * 使用它来进行下一步跳跃，以此类推，直到到达最后一个位置
 *
 * 例如，对于数组 [2,3,1,2,4,2,3]，
 * （1）初始位置是下标 0，从下标 0 出发，最远可到达下标 2，但此时我们并不一定就从该最远位置处往后跳跃，
 * 因为它可能还没有其他位置跳得远，此时就需要使用贪心的思想，找到那个跳的最远的位置。
 * 易知，由于下标 0 可到达的位置中，下标 1 的值是 3，也即在下标1处可以往后跳3步，
 * 比从最远处那个位置（2）处跳的更远（位置2只能跳1步），因此我们选择从下标1处往后跳。
 * （2）同理，从下标 1 出发可以达到更远的位置，因此第一步到达下标 1。
 * 从下标 1 出发，最远可到达下标 4。
 * 下标 1 可到达的位置中，下标 4 的值是 4 ，
 * 从下标 4 出发可以达到更远的位置，因此第二步到达下标 4。
 *
 * 在具体的实现中，我们维护当前能够到达的最大下标位置，记为边界end。
 * 我们从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加 1。
 *
 * 在遍历数组时，我们不访问最后一个元素，这是因为在访问最后一个元素之前，我们的边界一定大于等于最后一个位置，
 * 否则就无法跳到最后一个位置了。如果访问最后一个元素，在边界正好为最后一个位置的情况下，
 * 我们会增加一次「不必要的跳跃次数」，因此我们不必访问最后一个元素。
 */
class 跳跃游戏45 {
    public int jump(int[] nums) {
        int length = nums.length;
        int end = 0;//边界（也是下标），即把每一个位置能跳的最远位置作为边界，然后在边界内寻找能跳的最远的位置
        int maxPosition = 0;//表示最远能到达的地方/索引
        int steps = 0;//用于记录跳跃的次数
        for (int i = 0; i < length - 1; i++) {//遍历数组（不用遍历最后一个数，上面已经解释过啦）
            maxPosition = Math.max(maxPosition, i + nums[i]);//不断地更新最远位置/索引
            if (i == end) {//此时表示已经在边界内遍历完毕，并找到了下一步能跳的最远的位置maxPosition，
                // 于是把边界就设为该最远位置，用于在该边界内选择下一步跳跃的位置
                // 如上例中，把边界设为下标2，然后在下标0-2中找出那个能达到最远位置的下标，
                // 即下标1，因为它能达到的最远位置为下标4，于是再把边界设为4，
                // 再到这个里面找下一步能跳的最远的位置，以此类推。
                        end = maxPosition;
                steps++;//跳跃的步数加1
            }
        }
        return steps;
    }
}