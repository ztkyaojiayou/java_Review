package 数据结构与算法.剑指offer题解.贪心;

import java.util.Arrays;

/**
 * 题目描述
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。
 * 求该青蛙跳上一个n级的台阶总共有多少种跳法。
 */

/**
 * 方法1：动态规划（暴力，不推荐）
 * 设f[i] 表示 当前跳道第 i 个台阶的方法数。那么f[n]就是所求答案。
 * 假设现在已经跳到了第 n 个台阶，那么前一步可以从哪些台阶到达呢？
 * 如果上一步跳 1 步到达第 n 个台阶，说明上一步在第 n-1 个台阶。已知跳到第n-1个台阶的方法数为f[n-1]
 * 如果上一步跳 2 步到达第 n 个台阶，说明上一步在第 n-2 个台阶。已知跳到第n-2个台阶的方法数为f[n-2]
 * 。。。
 * 如果上一步跳 n 步到达第 n 个台阶，说明上一步在第 0 个台阶。已知跳到 第0个台阶的方法数为f[0]
 * 那么总的方法数就是所有可能的和。也就是f[n] = f[n-1] + f[n-2] + ... + f[0]
 * 显然初始条件f[0] = f[1] = 1
 * 所以我们就可以先求f[2]，然后f[3]...f[n-1]， 最后f[n]
 */
class 变态跳台阶24_1 {
    public int JumpFloorII(int target) {
        if (target <= 2) {
            return target;
        }
        int[] dp = new int[target + 1];
        Arrays.fill(dp, 1); //初始化每一种都可以直接从 0 跳到 n
        dp[0] = 0; //从 0 跳到 0 为 0 种，因为 n = 0，没法跳
        for (int i = 2; i <= target; i++) {
            for (int j = i - 1; j >= 1; j--) {
                dp[i] += dp[j]; //第 n 个状态是由前 n - 1 种状态推导出来，就是累加！
            }
        }
        return dp[target];
    }
}

/**
 * 方法:2：继续优化（推荐）
 * 对于方法一中的：f[n] = f[n-1] + f[n-2] + ... + f[0]
 * 那么f[n-1] 为多少呢？
 * f[n-1] = f[n-2] + f[n-3] + ... + f[0]
 * 所以一合并，f[n] = 2*f[n-1]，初始条件f[0] = f[1] = 1
 * 所以可以采用递归，记忆化递归，动态规划，递推。
 * 具体详细过程，可查看青蛙跳台阶。
 */
class solution24_2{
    int jumpFloorII(int n) {
        if (n==0 || n==1)
            return 1;
        int a = 1, b = 0;
        for (int i=2; i<=n; ++i) {
            b = a << 1; //  口诀：左移一位相当于乘2，右移一位相当于除2
            a = b;
        }
        return b;
    }
}

/**
 * 方法3：当然，对于f(n) = 2*f(n-1)，易知f(n) 是一个等比数列，所以可以直接取出其前n项和，即：f(n) = 2的 (n-1)次方，
 * 因此我们还可以直接调用库函数Math.pow(a,b)方法求a的b次方
 * 所以，针对本题还可以写出更加简单的代码。
 */
class solution24_3{
    public int JumpFloorII(int target) {
        return (int) Math.pow(2, target - 1);
    }
}
